name: ci
on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "*"

permissions:
  contents: write

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      # - name: Check that tag version and Cargo.toml version are the same
      #   shell: bash
      #   run: |
      #     if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
      #       echo "version does not match Cargo.toml" >&2
      #       exit 1
      #     fi
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: gh release create $VERSION --draft --verify-tag --title $VERSION
    outputs:
      version: ${{ env.VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      CROSS_VERSION: v0.2.5
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
        - build: linux
          os: ubuntu-24.04
          rust: stable
          target: x86_64-unknown-linux-gnu
        # - build: linux-arm64
        #   os: ubuntu-24.04
        #   rust: stable
        #   target: aarch64-unknown-linux-gnu
        # - build: linux
        #   os: ubuntu-24.04
        #   rust: nightly
        #   target: x86_64-unknown-linux-musl
        #   strip: x86_64-linux-musl-strip
        # - build: stable-x86
        #   os: ubuntu-24.04
        #   rust: stable
        #   target: i686-unknown-linux-gnu
        #   strip: x86_64-linux-gnu-strip
        # - build: stable-aarch64
        #   os: ubuntu-24.04
        #   rust: stable
        #   target: aarch64-unknown-linux-gnu
        #   strip: aarch64-linux-gnu-strip
        # - build: stable-arm-gnueabihf
        #   os: ubuntu-24.04
        #   rust: stable
        #   target: armv7-unknown-linux-gnueabihf
        #   strip: arm-linux-gnueabihf-strip
        # - build: stable-arm-musleabihf
        #   os: ubuntu-24.04
        #   rust: stable
        #   target: armv7-unknown-linux-musleabihf
        #   strip: arm-linux-musleabihf-strip
        # - build: stable-arm-musleabi
        #   os: ubuntu-24.04
        #   rust: stable
        #   target: armv7-unknown-linux-musleabi
        #   strip: arm-linux-musleabi-strip
        # - build: stable-powerpc64
        #   os: ubuntu-24.04
        #   rust: stable
        #   target: powerpc64-unknown-linux-gnu
        #   strip: powerpc64-linux-gnu-strip
        # - build: stable-s390x
        #   os: ubuntu-24.04
        #   rust: stable
        #   target: s390x-unknown-linux-gnu
        #   strip: s390x-linux-gnu-strip
        # - build: macos
        #   os: macos-latest
        #   rust: nightly
        #   target: x86_64-apple-darwin
        # - build: win-msvc
        #   os: windows-latest
        #   rust: nightly
        #   target: x86_64-pc-windows-msvc
        # - build: win-gnu
        #   os: windows-latest
        #   rust: nightly-x86_64-gnu
        #   target: x86_64-pc-windows-gnu
        # - build: win32-msvc
        #   os: windows-latest
        #   rust: nightly
        #   target: i686-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install packages (Ubuntu)
      if: matrix.os == 'ubuntu-24.04'
      shell: bash
      run: |
        ci/ubuntu-install-packages

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}

    - name: Use Cross
      if: matrix.os == 'ubuntu-24.04' && matrix.use_cross
      shell: bash
      run: |
        cat <<EOF > Cross.toml
        [target.${{ matrix.target }}]
        pre-build = [
            "dpkg --add-architecture \$CROSS_DEB_ARCH",
            "apt-get update && apt-get install --assume-yes libgtk-4-dev:\$CROSS_DEB_ARCH libpoppler-glib-dev:\$CROSS_DEB_ARCH"
        ]
        EOF
        cat Cross.toml
        dir="$RUNNER_TEMP/cross-download"
        mkdir "$dir"
        echo "$dir" >> $GITHUB_PATH
        cd "$dir"
        curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
        tar xf cross-x86_64-unknown-linux-musl.tar.gz
        echo "CARGO=cross" >> $GITHUB_ENV

    - name: Set target variables
      shell: bash
      run: |
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      shell: bash
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      shell: bash
      run: |
        ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          bin="target/${{ matrix.target }}/release/scrolex.exe"
        else
          bin="target/${{ matrix.target }}/release/scrolex"
        fi
        echo "BIN=$bin" >> $GITHUB_ENV

    - name: Strip release binary (macos)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: strip "$BIN"

    - name: Strip release binary (cross)
      if: env.CARGO == 'cross'
      shell: bash
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          "ghcr.io/cross-rs/${{ matrix.target }}:main" \
          "${{ matrix.strip }}" \
          "/$BIN"

    - name: Determine archive name
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        echo "ARCHIVE=scrolex-$version-${{ matrix.target }}" >> $GITHUB_ENV

    - name: Creating directory for archive
      shell: bash
      run: |
        mkdir -p "$ARCHIVE"
        cp "$BIN" "$ARCHIVE"/
        cp README.md "$ARCHIVE"/

    - name: Build archive (Windows)
      shell: bash
      if: matrix.os == 'windows-latest'
      run: |
        7z a "$ARCHIVE.zip" "$ARCHIVE"
        certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
        echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
        echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV

    - name: Build archive (Unix)
      shell: bash
      if: matrix.os != 'windows-latest'
      run: |
        tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
        shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
        echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
        echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

    - name: Upload release archive
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        gh release upload "$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }}
